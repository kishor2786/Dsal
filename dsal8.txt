05.08 3:51 PM
dsal8
#include <iostream> #include <string> #include <algorithm> using namespace std;

class Node { public: string keyword, meaning; Node* left; Node* right; int height;

Node(string key, string value) {
    keyword = key;
    meaning = value;
    left = right = nullptr;
    height = 1;
}

};

int height(Node* n) { return n ? n->height : 0; }

int balanceFactor(Node* n) { return n ? height(n->left) - height(n->right) : 0; }

Node* rotateRight(Node* y) { Node* x = y->left; Node* T2 = x->right;

x->right = y;
y->left = T2;

y->height = 1 + max(height(y->left), height(y->right));
x->height = 1 + max(height(x->left), height(x->right));

return x;

}

Node* rotateLeft(Node* x) { Node* y = x->right; Node* T2 = y->left;

y->left = x;
x->right = T2;

x->height = 1 + max(height(x->left), height(x->right));
y->height = 1 + max(height(y->left), height(y->right));

return y;

}

Node* insert(Node* node, string key, string value) { if (!node) return new Node(key, value);

if (key < node->keyword)
    node->left = insert(node->left, key, value);
else if (key > node->keyword)
    node->right = insert(node->right, key, value);
else {
    cout << "Keyword already exists.\n";
    return node;
}r

node->height = 1 + max(height(node->left), height(node->right));
int balance = balanceFactor(node);

if (balance > 1 && key < node->left->keyword)
    return rotateRight(node);

if (balance < -1 && key > node->right->keyword)
    return rotateLeft(node);

if (balance > 1 && key > node->left->keyword) {
    node->left = rotateLeft(node->left);
    return rotateRight(node);
}

if (balance < -1 && key < node->right->keyword) {
    node->right = rotateRight(node->right);
    return rotateLeft(node);
}

return node;

}

Node* findMin(Node* node) { 
while (node->left) 
node = node->left; 
return node; 
}

Node* deleteNode(Node* root, string key) { if (!root) return root;

if (key < root->keyword)
    root->left = deleteNode(root->left, key);
else if (key > root->keyword)
    root->right = deleteNode(root->right, key);
else {
    if (!root->left || !root->right) {
        Node* temp = root->left ? root->left : root->right;
        if (!temp) {
            temp = root;
            root = nullptr;
        } else
            *root = *temp;
        delete temp;
    } else {
        Node* temp = findMin(root->right);
        root->keyword = temp->keyword;
        root->meaning = temp->meaning;
        root->right = deleteNode(root->right, temp->keyword);
    }
}

if (!root) return root;

root->height = 1 + max(height(root->left), height(root->right));
int balance = balanceFactor(root);

if (balance > 1 && balanceFactor(root->left) >= 0)
    return rotateRight(root);

if (balance > 1 && balanceFactor(root->left) < 0) {
    root->left = rotateLeft(root->left);
    return rotateRight(root);
}

if (balance < -1 && balanceFactor(root->right) <= 0)
    return rotateLeft(root);

if (balance < -1 && balanceFactor(root->right) > 0) {
    root->right = rotateRight(root->right);
    return rotateLeft(root);
}

return root;

}

Node* search(Node* root, string key, int& comparisons) { while (root) { comparisons++; if (key == root->keyword) return root; else if (key < root->keyword) root = root->left; else root = root->right; } return nullptr; }

void inorder(Node* root) { if (!root) return; inorder(root->left); cout << root->keyword << " : " << root->meaning << endl; inorder(root->right); }

void reverseInorder(Node* root) { if (!root) return; reverseInorder(root->right); cout << root->keyword << " : " << root->meaning << endl; reverseInorder(root->left); }

int main() { Node* root = nullptr; int choice; string key, meaning;

do {
    cout << "\nDictionary Menu\n1. Add keyword\n2. Display Ascending\n3. Display Descending\n4. Delete keyword\n5. Search keyword\n6. Update meaning\n7. Exit\nEnter your choice: ";
    cin >> choice;
    cin.ignore();

    switch (choice) {
        case 1:
            cout << "Enter keyword: "; getline(cin, key);
            cout << "Enter meaning: "; getline(cin, meaning);
            root = insert(root, key, meaning);
            break;
        case 2:
            cout << "\nAscending Order:\n";
            inorder(root);
            break;
        case 3:
            cout << "\nDescending Order:\n";
            reverseInorder(root);
            break;
        case 4:
            cout << "Enter keyword to delete: "; getline(cin, key);
            root = deleteNode(root, key);
            break;
        case 5: {
            cout << "Enter keyword to search: "; getline(cin, key);
            int comparisons = 0;
            Node* found = search(root, key, comparisons);
            if (found)
                cout << "Found: " << found->keyword << " : " << found->meaning << endl;
            else
                cout << "Not found!" << endl;
            cout << "Comparisons: " << comparisons << endl;
            break;
        }
        case 6:
            cout << "Enter keyword to update: "; getline(cin, key);
            int c;
            if (Node* upd = search(root, key, c)) {
                cout << "Enter new meaning: "; getline(cin, upd->meaning);
                cout << "Meaning updated." << endl;
            } else {
                cout << "Keyword not found." << endl;
            }
            break;
        case 7:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice!" << endl;
    }
} while (choice != 7);

return 0;

}


