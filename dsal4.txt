05.07 2:56 PM
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

// Insert a new value into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr)
        return new Node(value);

    if (value < root->data)
        root->left = insert(root->left, value);
    else
        root->right = insert(root->right, value);

    return root;
}

// Find height (longest path from root to leaf)
int findHeight(Node* root) {
    if (root == nullptr)
        return 0;

    int leftHeight = findHeight(root->left);
    int rightHeight = findHeight(root->right);

    return max(leftHeight, rightHeight) + 1;
}

// Find minimum value in BST
int findMinimum(Node* root) {
    if (root == nullptr) return -1;

    while (root->left != nullptr)
        root = root->left;

    return root->data;
}

// Mirror the BST
void mirrorTree(Node* root) {
    if (root == nullptr) return;

    swap(root->left, root->right);
    mirrorTree(root->left);
    mirrorTree(root->right);
}

// Search for a value in the BST
bool search(Node* root, int key) {
    if (root == nullptr)
        return false;
    if (root->data == key)
        return true;
    else if (key < root->data)
        return search(root->left, key);
    else
        return search(root->right, key);
}

// Inorder traversal (for testing)
void inorder(Node* root) {
    if (root == nullptr) return;

    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

int main() {
    Node* root = nullptr;
    int n, value, choice;

    cout << "Enter number of values to insert into BST: ";
    cin >> n;
    cout << "Enter the values: ";
    for (int i = 0; i < n; i++) {
        cin >> value;
        root = insert(root, value);
    }

    while (true) {
        cout << "\n--- BST Menu ---\n";
        cout << "1. Insert a new node\n";
        cout << "2. Find height (longest path)\n";
        cout << "3. Find minimum value\n";
        cout << "4. Mirror the tree\n";
        cout << "5. Search for a value\n";
        cout << "6. Display inorder traversal\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to insert: ";
            cin >> value;
            root = insert(root, value);
            break;
        case 2:
            cout << "Height of tree: " << findHeight(root) << endl;
            break;
        case 3:
            cout << "Minimum value in tree: " << findMinimum(root) << endl;
            break;
        case 4:
            mirrorTree(root);
            cout << "Tree mirrored.\n";
            break;
        case 5:
            cout << "Enter value to search: ";
            cin >> value;
            if (search(root, value))
                cout << "Value found!\n";
            else
                cout << "Value not found.\n";
            break;
        case 6:
            cout << "Inorder traversal: ";
            inorder(root);
            cout << endl;
            break;
        case 7:
            cout << "Exiting.\n";
            return 0;
        default:
            cout << "Invalid choice.\n";
        }
    }

    return 0;
}
